<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Darren&#39;s Tech Playground</title>
  
  
  <link href="https://donaldlwu.github.io/donaldwu.github.com/atom.xml" rel="self"/>
  
  <link href="https://donaldlwu.github.io/donaldwu.github.com/"/>
  <updated>2022-07-07T18:13:43.876Z</updated>
  <id>https://donaldlwu.github.io/donaldwu.github.com/</id>
  
  <author>
    <name>Deiren Wu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React-Native之旅Day4 Text Input</title>
    <link href="https://donaldlwu.github.io/donaldwu.github.com/2022/07/08/React-Native%E4%B9%8B%E6%97%85Day4/"/>
    <id>https://donaldlwu.github.io/donaldwu.github.com/2022/07/08/React-Native%E4%B9%8B%E6%97%85Day4/</id>
    <published>2022-07-08T00:30:47.000Z</published>
    <updated>2022-07-07T18:13:43.876Z</updated>
    
    <content type="html"><![CDATA[<p>今天就來看看 Reac-Native 如何利用<a href="https://reactnative.dev/docs/intro-react-native-components">核心元件</a>來處理文字輸入</p><p><a href="https://reactnative.dev/docs/textinput#content">TextInput</a> 帶有一個 <code>onChangeText</code> 的 prop</p><p>這個 prop 接受一個 Funciton 可在文字變化時被呼叫</p><p>以及在文字送出時呼叫的 <code>onSubmitEditing</code></p><span id="more"></span><p>這裡的範例會將用戶輸入的文字用空格格開並將文字轉換成 🍕</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Text</span>, <span class="title class_">TextInput</span>, <span class="title class_">View</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">PizzaTranslator</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 2</span></span><br><span class="line">  <span class="keyword">const</span> [text, setText] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;&#123;padding:</span> <span class="attr">10</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">TextInput</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&#123;&#123;height:</span> <span class="attr">40</span>&#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">placeholder</span>=<span class="string">&quot;Type here to translate!&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        // <span class="attr">3</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChangeText</span>=<span class="string">&#123;newText</span> =&gt;</span> setText(newText)&#125;</span></span><br><span class="line"><span class="language-xml">        defaultValue=&#123;text&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;&#123;padding:</span> <span class="attr">10</span>, <span class="attr">fontSize:</span> <span class="attr">42</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;text.split(&#x27; &#x27;).map((word) =&gt; word &amp;&amp; &#x27;🍕&#x27;).join(&#x27; &#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">PizzaTranslator</span>;</span><br></pre></td></tr></table></figure><ol><li><p>Import Text</p></li><li><p>因為 text 是會改變的，因此這裡使用 state 儲存</p></li><li><p>在元件內將觀察輸入的文字並更改 state</p></li><li><p>在 Text 元件內根據 text 顯示轉換完成的資訊</p></li></ol><p>延伸閱讀</p><p><a href="https://reactjs.org/docs/forms.html#controlled-components">Controlled Component</a></p><p><a href="https://reactnative.dev/docs/textinput">TextInput</a></p><p><a href="https://reactnative.dev/docs/handling-touches">Handle touches</a></p><p>下篇待續 …</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天就來看看 Reac-Native 如何利用&lt;a href=&quot;https://reactnative.dev/docs/intro-react-native-components&quot;&gt;核心元件&lt;/a&gt;來處理文字輸入&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://reactnative.dev/docs/textinput#content&quot;&gt;TextInput&lt;/a&gt; 帶有一個 &lt;code&gt;onChangeText&lt;/code&gt; 的 prop&lt;/p&gt;
&lt;p&gt;這個 prop 接受一個 Funciton 可在文字變化時被呼叫&lt;/p&gt;
&lt;p&gt;以及在文字送出時呼叫的 &lt;code&gt;onSubmitEditing&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="React-Native" scheme="https://donaldlwu.github.io/donaldwu.github.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React-Native之旅Day3-React Fundamentals</title>
    <link href="https://donaldlwu.github.io/donaldwu.github.com/2022/07/06/React-Native%E4%B9%8B%E6%97%85Day3-ReactFundamentals/"/>
    <id>https://donaldlwu.github.io/donaldwu.github.com/2022/07/06/React-Native%E4%B9%8B%E6%97%85Day3-ReactFundamentals/</id>
    <published>2022-07-06T21:26:31.000Z</published>
    <updated>2022-07-07T18:13:43.876Z</updated>
    
    <content type="html"><![CDATA[<p>接下來繼續跟著文件來認識 React Fundamentals</p><p>React-Native 是基於 React 發展的技術</p><p>因此深入瞭解 React 如何運作也是學習 React-Native 的好方法</p><span id="more"></span><p>首先我們會來了解 React 的幾個核心觀念</p><ul><li><p>components</p></li><li><p>JSX</p></li><li><p>props</p></li><li><p>state</p></li></ul><p><a href="https://reactjs.org/docs/getting-started.html">React’s official documentation</a></p><h2 id="First-component"><a href="#First-component" class="headerlink" title="First component"></a>First component</h2><p>接下來我們就跟著文件來寫第一個 component </p><h3 id="Function-Component"><a href="#Function-Component" class="headerlink" title="Function Component"></a>Function Component</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Text</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Cat</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 4</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Text</span>&gt;</span>Hellow, I am your cat!<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Cat</span>;</span><br></pre></td></tr></table></figure><ol><li>import</li></ol><p>要使用 Function Component 的方式定義一個 <code>Cat</code> Component</p><p>首先會需要 import React 以及原生 Text Component</p><ol start="2"><li>此 Component 從一個 fuction 開始</li></ol><p>我們可以將 components 當作一個藍圖，而 function 會 return 一個 React element</p><p>這個 React element 即用來渲染你的畫面</p><br><p>在這裡 return 一個 Text element 表示我們會在畫面上渲染一個 Text 元件</p><ol start="3"><li>為了讓其他地方可以引用這個 Component，這裡使用了 <code>export default</code></li></ol><blockquote><p><a href="https://www.samanthaming.com/tidbits/79-module-cheatsheet/">導出元件整理</a></p></blockquote><ol start="4"><li>最後我們來看看 return 語句</li></ol><p><code>&lt;Text&gt;Hellow, I am your cat!&lt;/Text&gt;</code></p><p>這是種簡化 React 元素的寫法，我們稱為 JSX</p><br><h3 id="Class-Component"><a href="#Class-Component" class="headerlink" title="Class Component"></a>Class Component</h3><blockquote><p>Class components 寫起來稍微比 Function Component 繁複一點</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Text</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="comment">// 3</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 5</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Text</span>&gt;</span>Hellow, I am your cat!<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Cat</span>;</span><br></pre></td></tr></table></figure><ol><li><p>首先我們要從 React import <code>Component</code></p></li><li><p>這個 Component 從一個 class extending 開始</p></li><li><p>Class 會有一個 <code>render()</code> 函數，裡面也是會 return 一個 React element</p></li><li><p>如同 Function component，這裡也需要將元件 export 出來</p></li><li><p>JSX</p></li></ol><h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><p>JSX 語法讓我們可以在 JavaScript 內建構元件</p><p><a href="https://reactjs.org/docs/jsx-in-depth.html">A comporehensice guide to JSX</a></p><p>而且 JSX 其實也是 JavaScript，我們可以在語法裡使用變數</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Text</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Cat</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">&quot;Maru&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Text</span>&gt;</span>Hello, I am &#123;name&#125;!<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Cat</span>;</span><br></pre></td></tr></table></figure><p>如上範例，我們可以用括號來引入變數</p><p>而括號內也可以使用 JavaScript 表達式</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Text</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getFullName</span> = (<span class="params">firstName, secondName, thirdName</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> firstName + <span class="string">&quot; &quot;</span> + secondName + <span class="string">&quot; &quot;</span> + thirdName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Cat</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Hello, I am &#123;getFullName(&quot;Rum&quot;, &quot;Tum&quot;, &quot;Tugger&quot;)&#125;!</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Cat</span>;</span><br></pre></td></tr></table></figure><blockquote><p>JSX 語法需要引入 <code>react</code></p></blockquote><h2 id="Custom-Component"><a href="#Custom-Component" class="headerlink" title="Custom Component"></a>Custom Component</h2><p>我們也可以將原生組件組合再一起做出我們的客製化元件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Text</span>, <span class="title class_">TextInput</span>, <span class="title class_">View</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Cat</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Hello, I am...<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">TextInput</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">height:</span> <span class="attr">40</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">borderColor:</span> &#x27;<span class="attr">gray</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">borderWidth:</span> <span class="attr">1</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">defaultValue</span>=<span class="string">&quot;Name me!&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Cat</span>;</span><br></pre></td></tr></table></figure><p>也可以將做好的元件包入其他元件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Text</span>, <span class="title class_">View</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Cat</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Text</span>&gt;</span>I am also a cat!<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Cafe</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Welcome!<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Cat</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Cat</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Cat</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Cafe</span>;</span><br></pre></td></tr></table></figure><p>如果有個元件包含這其他元件，則此元件被稱為父元件</p><p>被包含的則稱為子元件</p><p>在這裡每次呼叫 <Cat> 渲染都是不同元件</p><p>意味者我們可以使用不同的 props 來客製化他們</p><h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><p>就像給貓取名字，我們可以給元件定義 props</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Text</span>, <span class="title class_">View</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Cat</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Hello, I am &#123;props.name&#125;!<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Cafe</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Cat</span> <span class="attr">name</span>=<span class="string">&quot;Maru&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Cat</span> <span class="attr">name</span>=<span class="string">&quot;Jellylorum&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Cat</span> <span class="attr">name</span>=<span class="string">&quot;Spot&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Cafe</span>;</span><br></pre></td></tr></table></figure><p>大多數的 React 核心元件都可以通過 props 來完成客製化</p><p>例如 Image 可以從訂製圖片來源</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Text</span>, <span class="title class_">View</span>, <span class="title class_">Image</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CatApp</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Image</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">source</span>=<span class="string">&#123;&#123;uri:</span> &quot;<span class="attr">https:</span>//<span class="attr">reactnative.dev</span>/<span class="attr">docs</span>/<span class="attr">assets</span>/<span class="attr">p_cat1.png</span>&quot;&#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&#123;&#123;width:</span> <span class="attr">200</span>, <span class="attr">height:</span> <span class="attr">200</span>&#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Hello, I am your cat!<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CatApp</span>;</span><br></pre></td></tr></table></figure><p>核心元件通常有多種不同的 props</p><p>通常由 property-value pair 的方式設計</p><blockquote><p>雙括號用來在 JSX 中傳遞 JS Object</p></blockquote><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>如果 props 理解成參數，那 State 就是使用紀錄了</p><p>通常用來處理用戶交互的變化</p><p>也就是 props 用來進行初次的元件畫面渲染</p><p>然後利用 state 紀錄可能隨時間變化的資料</p><h3 id="Function-Component-1"><a href="#Function-Component-1" class="headerlink" title="Function Component"></a>Function Component</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span>, <span class="title class_">Text</span>, <span class="title class_">View</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-native&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Cat</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 2</span></span><br><span class="line">  <span class="keyword">const</span> [isHungry, setIsHungry] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        I am &#123;props.name&#125;, and I am &#123;isHungry ? &quot;hungry&quot; : &quot;full&quot;&#125;!</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      // 3</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onPress</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setIsHungry(false);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        // 4</span></span><br><span class="line"><span class="language-xml">        disabled=&#123;!isHungry&#125;</span></span><br><span class="line"><span class="language-xml">        title=&#123;isHungry ? &quot;Pour me some milk, please!&quot; : &quot;Thank you!&quot;&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Cafe</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Cat</span> <span class="attr">name</span>=<span class="string">&quot;Munkustrap&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Cat</span> <span class="attr">name</span>=<span class="string">&quot;Spot&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Cafe</span>;</span><br></pre></td></tr></table></figure><p>可以利用 Hook 為 component 新增 state</p><p><a href="https://reactjs.org/docs/hooks-state.html">useState 相關文件</a></p><p>Hook 是種 function 讓我們可以連結至 React 的功能中</p><p>例如 <code>useState</code> 就是個可以加入 component 的 Hook</p><p><a href="https://reactjs.org/docs/hooks-intro.html">各種 Hooks in React</a></p><ol><li><p>首先還是從 react 中 import useState</p></li><li><p>然後我們就可以利用在 Function 中調用 useState 來幫組建創建變數</p></li></ol><blockquote><p>可以用 useState 紀錄 strings, numbers, Booleans, arrays, objects.</p></blockquote><p>在這邊創建了一個狀態變數 <code>isHungry</code> 並給一個初始值 <code>true</code></p><p>並創建一個用於改變狀態變量的值 <code>setIsHugry</code></p><blockquote><p>[<getter>, <setter>] &#x3D; useState(<initalValue>)</p></blockquote><ol start="3"><li>接下來設定了一個 Button 並帶了一個 <code>onPress</code> 的初始值</li></ol><p>當 <code>onPress</code> 被觸發，就會呼叫到 <code>setIsHungry(false)</code> 改變到 <code>isHungry</code> 的值改變為 false</p><ol start="4"><li>而當 <code>isHungry</code> 為 false，Button 的 <code>disabled</code> prop 就會變為 true 並改變 title</li></ol><blockquote><p><code>isHungry</code> 是使用了 const 關鍵字依然看起來可以被修改的原因是當我們調用 <code>setIsHungry</code> 時，所在的 component 將會重新渲染(整個 Cat 會從頭執行，此時 <code>useState</code> 會返回新值)</p></blockquote><ol start="5"><li>將不同 props 的 <code>Cat</code> 放入 <code>Cafe 元件</code></li></ol><blockquote><p>這裡<code>&lt;&gt;&lt;/&gt;</code> 是JSX 的 <a href="https://zh-hans.reactjs.org/docs/fragments.html">Fragments</a>，可以簡化多餘宣告 View 的麻煩</p></blockquote><h3 id="Class-Components"><a href="#Class-Components" class="headerlink" title="Class Components"></a>Class Components</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &quot;react&quot;;</span><br><span class="line">import &#123; Button, Text, View &#125; from &quot;react-native&quot;;</span><br><span class="line"></span><br><span class="line">class Cat extends Component &#123;</span><br><span class="line">  // 1</span><br><span class="line">  state = &#123; isHungry: true &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;View&gt;</span><br><span class="line">        &lt;Text&gt;</span><br><span class="line">          I am &#123;this.props.name&#125;, and I am</span><br><span class="line">          &#123;this.state.isHungry ? &quot; hungry&quot; : &quot; full&quot;&#125;!</span><br><span class="line">        &lt;/Text&gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">          onPress=&#123;() =&gt; &#123;</span><br><span class="line">            // 3</span><br><span class="line">            this.setState(&#123; isHungry: false &#125;);</span><br><span class="line">          &#125;&#125;</span><br><span class="line">          disabled=&#123;!this.state.isHungry&#125;</span><br><span class="line">          title=&#123;</span><br><span class="line">            this.state.isHungry ? &quot;Pour me some milk, please!&quot; : &quot;Thank you!&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Cafe extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;&gt;</span><br><span class="line">        &lt;Cat name=&quot;Munkustrap&quot; /&gt;</span><br><span class="line">        &lt;Cat name=&quot;Spot&quot; /&gt;</span><br><span class="line">      &lt;/&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default  Cafe;</span><br></pre></td></tr></table></figure><ol><li><p>與 Function 方式不同的是 state 以 object 方式存放</p></li><li><p>元件中獲取 state 是通過 <code>this.state</code></p></li><li><p>修改狀態僅需 <code>this.setState()</code> 傳入要修改的 key-value 物件即可</p></li></ol><blockquote><p>不要給 state 直接賦值，使用 <code>this.setState</code> 才能讓 React 知道狀態的變化且觸發渲染。</p></blockquote><p>接下來就與 Function 類似拉</p><br><p>下篇繼續來學習更多核心元件用法</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;接下來繼續跟著文件來認識 React Fundamentals&lt;/p&gt;
&lt;p&gt;React-Native 是基於 React 發展的技術&lt;/p&gt;
&lt;p&gt;因此深入瞭解 React 如何運作也是學習 React-Native 的好方法&lt;/p&gt;</summary>
    
    
    
    
    <category term="React-Native" scheme="https://donaldlwu.github.io/donaldwu.github.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React-Native之旅Day2-Core Components</title>
    <link href="https://donaldlwu.github.io/donaldwu.github.com/2022/07/05/React-Native%E4%B9%8B%E6%97%85Day2-Core%20Components/"/>
    <id>https://donaldlwu.github.io/donaldwu.github.com/2022/07/05/React-Native%E4%B9%8B%E6%97%85Day2-Core%20Components/</id>
    <published>2022-07-05T22:04:08.000Z</published>
    <updated>2022-07-07T18:13:43.876Z</updated>
    
    <content type="html"><![CDATA[<p>第二篇就接續 Introduction</p><p>來看看<a href="https://reactnative.dev/docs/intro-react-native-components">Core Components and Native Components</a></p><p>這篇主要討論這些元件是如何在 React-Native 裡運作的。</p><span id="more"></span><h3 id="Views-and-mobile-development"><a href="#Views-and-mobile-development" class="headerlink" title="Views and mobile development"></a>Views and mobile development</h3><p>view 在 Android 跟 iOS 中 view 是建構 UI 的基本元件</p><p>可以是 text、可以是 button, Image 或是負責響應用戶 input 的元件</p><p>這些東西可以互相組合</p><h3 id="Native-Components"><a href="#Native-Components" class="headerlink" title="Native Components"></a>Native Components</h3><p>如同 iOS 開發使用 Swift or Objective-C</p><p>Android 使用 Kotlin or Java</p><p>在 React-Native 使用 JavaScript 調用 React 的元件</p><p>React-Native 會在 Runtime 生成對應的原生畫面的元件</p><p>這部分原生元件稱為 Native Components</p><br><p>React-Native 有著這些已經能馬上使用的元件可以用在 app 開發上的元件我們稱為 Core Components</p><br> <p>React-Native 也可以讓針對平台建立自己的 Native Components</p><p>也可以在<a href="https://reactnative.directory/">社區</a>中尋找別人貢獻的元件</p><h3 id="Core-Components"><a href="#Core-Components" class="headerlink" title="Core Components"></a>Core Components</h3><p><a href="https://reactnative.dev/docs/components-and-apis">API</a></p><p>接下去的章節會來教我們 React 元件的應用</p><p>下篇待續…</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;第二篇就接續 Introduction&lt;/p&gt;
&lt;p&gt;來看看&lt;a href=&quot;https://reactnative.dev/docs/intro-react-native-components&quot;&gt;Core Components and Native Components&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇主要討論這些元件是如何在 React-Native 裡運作的。&lt;/p&gt;</summary>
    
    
    
    
    <category term="React-Native" scheme="https://donaldlwu.github.io/donaldwu.github.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>從文件開始React-Native之旅Day1</title>
    <link href="https://donaldlwu.github.io/donaldwu.github.com/2022/07/04/React-Native%E4%B9%8B%E6%97%85Day1/"/>
    <id>https://donaldlwu.github.io/donaldwu.github.com/2022/07/04/React-Native%E4%B9%8B%E6%97%85Day1/</id>
    <published>2022-07-04T21:32:03.000Z</published>
    <updated>2022-07-07T18:13:43.876Z</updated>
    
    <content type="html"><![CDATA[<p>因為工作需要，開始要跟 React-Native 打交道拉</p><p>那要學習一項技術，<a href="https://reactnative.dev/docs/getting-started">官方文件</a>總是要面對的</p><p>但總覺得年紀大了過目就忘</p><p>自己有時做筆記還是太精簡了</p><p>那不如就寫成 Blog 順便拯救我那可悲的更新頻率🤪</p><span id="more"></span><h3 id="設定環境"><a href="#設定環境" class="headerlink" title="設定環境"></a>設定環境</h3><p>首先就進入導覽首頁看看摟</p><p>看沒兩句果然還是需要先去<a href="https://reactnative.dev/docs/environment-setup">設置一下環境</a></p><p>文件已經蠻清楚了，m1 的 mac 也沒遇到太大問題</p><p>安裝 node, Xcode, cocoapods</p><p>然後創建一個新的初始 App</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx react-native init AwesomeProject</span><br></pre></td></tr></table></figure><p>然後先啟動 <code>Metro</code> 看來是幫我們搞定 <code>javaScript</code> 一些 bunding 設定的工具</p><blockquote><p>If you’re familiar with web development, Metro is a lot like webpack—for React Native apps. Unlike Swift or Objective-C, JavaScript isn’t compiled—and neither is React Native. Bundling isn’t the same as compiling, but it can help improve startup performance and translate some platform-specific JavaScript into more widely supported JavaScript.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx react-native start</span><br></pre></td></tr></table></figure><p>然後就可以把 App 跑起來看看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx react-native run-ios</span><br></pre></td></tr></table></figure><br><p>接下來文檔提到了該如何使用這份文件，可以線性的看下去</p><p>又或者對 React 有了解的可以跳過一些部分</p><p>但對我來說就是看下去拉</p><br><p>前置作業，文檔告訴我們至少要懂些 javaScript </p><br> <p>玩一下慣例的 <a href="https://snack.expo.dev/">Hello World 範例</a> <del>預設不是 Hello World 差評</del></p><br><h3 id="Function-Components-and-Class-Components"><a href="#Function-Components-and-Class-Components" class="headerlink" title="Function Components and Class Components"></a>Function Components and Class Components</h3><p>原本只有 class components 有 state，在 0.59 有了 Hooks API 之後 function components 也可以有 state 了</p><p>因此後面範例官方也會附上兩種方式的寫法</p><p>以前面的 Hello World 為例</p><p>Function Component</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Text</span>, <span class="title class_">View</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">HelloWorldApp</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">flex:</span> <span class="attr">1</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">justifyContent:</span> &#x27;<span class="attr">center</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">alignItems:</span> &#x27;<span class="attr">center</span>&#x27;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">HelloWorldApp</span>;</span><br></pre></td></tr></table></figure><p>Class Component</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Text</span>, <span class="title class_">View</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWorldApp</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">flex:</span> <span class="attr">1</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">justifyContent:</span> &quot;<span class="attr">center</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">alignItems:</span> &quot;<span class="attr">center</span>&quot;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">HelloWorldApp</span>;</span><br></pre></td></tr></table></figure><p>後面就是提醒你在文章裡會有不同領域開發者熟悉的想法出現在文檔中可以查看</p><p>跟選單路徑會用粗體呈現</p><p>Introduction 就到這邊拉</p><p>下篇待續…</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;因為工作需要，開始要跟 React-Native 打交道拉&lt;/p&gt;
&lt;p&gt;那要學習一項技術，&lt;a href=&quot;https://reactnative.dev/docs/getting-started&quot;&gt;官方文件&lt;/a&gt;總是要面對的&lt;/p&gt;
&lt;p&gt;但總覺得年紀大了過目就忘&lt;/p&gt;
&lt;p&gt;自己有時做筆記還是太精簡了&lt;/p&gt;
&lt;p&gt;那不如就寫成 Blog 順便拯救我那可悲的更新頻率🤪&lt;/p&gt;</summary>
    
    
    
    
    <category term="React-Native" scheme="https://donaldlwu.github.io/donaldwu.github.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>修改Mac預設截圖儲存位置</title>
    <link href="https://donaldlwu.github.io/donaldwu.github.com/2022/07/02/%E4%BF%AE%E6%94%B9Mac%E9%A0%90%E8%A8%AD%E6%88%AA%E5%9C%96%E5%84%B2%E5%AD%98%E4%BD%8D%E7%BD%AE/"/>
    <id>https://donaldlwu.github.io/donaldwu.github.com/2022/07/02/%E4%BF%AE%E6%94%B9Mac%E9%A0%90%E8%A8%AD%E6%88%AA%E5%9C%96%E5%84%B2%E5%AD%98%E4%BD%8D%E7%BD%AE/</id>
    <published>2022-07-02T18:27:04.000Z</published>
    <updated>2022-07-07T18:13:45.204Z</updated>
    
    <content type="html"><![CDATA[<p>近期在用 vim 撰寫 markdown 文檔時感受到其他筆記軟體最大的落差</p><p>大概就是無法簡單截圖畫面後拖進文檔裡了吧</p><p>但轉念一想，既然都要用 vim 了</p><p>還要用滑鼠去拖圖片好像也蠻浪費時間的</p><p>那我能不能截圖完就知道圖檔位置直接用 markdown 語法寫入文檔中呢？</p><span id="more"></span><p>那既然都想到了，就試著改良一下吧</p><p>首先我預想的流程如下</p><ol><li><p>截圖</p></li><li><p>截圖同時複製位置跟檔名到剪貼簿</p></li><li><p>文檔內貼入鏈結</p></li></ol><p>但目前我找到的資訊在截圖時是可以按住 ctrl 複製到剪貼簿</p><p>可以貼上其他有支援的筆記軟體</p><p>但我還不知道如何取得我要的資訊</p><br><p>既然這條路卡住了，那就轉個想法</p><p>我知道我的截圖預設會存在電腦某個指定位置</p><p>可以按下 command + shift + 5 點擊 option 進行儲存位置的修改</p><p>那我可以把流程修改一下</p><ol><li><p>截圖存放到已知位置(放到文檔附近就可以直接取用)</p></li><li><p>文檔內直接用 markdown 語法叫出圖</p></li></ol><br><p>那接下來的問題就是改變截圖儲存位置的動作過於繁瑣</p><p>光要改變截圖儲存位置的操作就太久了</p><p>如果我可以一步就把儲存位置換到現在文件的路徑底下，也可以一步切回原本預設的位置</p><p>使用上應該會更加的方便吧</p><br><p>經過尋找後確定了以下指令可以在 terminal 進行截圖儲存路徑的切換</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.screencapture location &#123;save_path_youwant&#125;</span><br></pre></td></tr></table></figure><p>但每次都要手動打入路徑肯定是不能接受的</p><p>我希望可以利用 script 跳出一個選單給我進行選擇</p><p>我目前應該需要兩個選項</p><ol><li><p>儲存到當前目錄</p></li><li><p>儲存到預設目錄</p></li></ol><p>這樣我就可以簡單選擇了</p><br><p>最終完成了這個簡易的 helper script</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">echo &quot;=========== select the operation ============&quot;</span><br><span class="line">echo &quot;  1) Default&quot;</span><br><span class="line">echo &quot;  2) PWD&quot;</span><br><span class="line"> </span><br><span class="line">read n</span><br><span class="line">case $n in</span><br><span class="line">  1) </span><br><span class="line">    defaults write com.apple.screencapture location ~/Screenshot</span><br><span class="line">    echo &quot;SCREENSHOT WILL SAVE TO: Default&quot;;;</span><br><span class="line">  2) </span><br><span class="line">    defaults write com.apple.screencapture location $(pwd)</span><br><span class="line">    echo &quot;SSCREENSHOT WILL SAVE TO: $(pwd)&quot;;;</span><br><span class="line">  *) echo &quot;invalid option&quot;;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>最後再新增個 alias 到 .zshrc 讓呼叫 script 更加方便</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias shot=&#x27;sh Screenshot.sh&#x27;</span><br></pre></td></tr></table></figure><p>使用起來就會是</p><ol><li><p>輸入 script</p></li><li><p>選擇儲存位置</p></li><li><p>開心寫作？(<code>![filename](filename.png)</code>)</p></li></ol><img src=https://dl.dropboxusercontent.com/s/btwg4ca94wno98g/2022-07-02%2019.46.39.gif><p>至於截圖完能不能再更方便一點 …</p><p>像是目前預設檔名是包含時間的一坨，改名也是挺麻煩的</p><p>又或是 snippet 讓圖片插入更輕鬆點</p><p>下次有空繼續玩摟。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;近期在用 vim 撰寫 markdown 文檔時感受到其他筆記軟體最大的落差&lt;/p&gt;
&lt;p&gt;大概就是無法簡單截圖畫面後拖進文檔裡了吧&lt;/p&gt;
&lt;p&gt;但轉念一想，既然都要用 vim 了&lt;/p&gt;
&lt;p&gt;還要用滑鼠去拖圖片好像也蠻浪費時間的&lt;/p&gt;
&lt;p&gt;那我能不能截圖完就知道圖檔位置直接用 markdown 語法寫入文檔中呢？&lt;/p&gt;</summary>
    
    
    
    
    <category term="terminal" scheme="https://donaldlwu.github.io/donaldwu.github.com/tags/terminal/"/>
    
  </entry>
  
  <entry>
    <title>Swift 與 Vim</title>
    <link href="https://donaldlwu.github.io/donaldwu.github.com/2022/03/15/Swift%E8%88%87Vim/"/>
    <id>https://donaldlwu.github.io/donaldwu.github.com/2022/03/15/Swift%E8%88%87Vim/</id>
    <published>2022-03-15T14:38:02.000Z</published>
    <updated>2022-07-07T18:13:43.880Z</updated>
    
    <content type="html"><![CDATA[<p>在 Apple 官方推出 <a href="https://github.com/apple/sourcekit-lsp">sourcekit-lsp</a> 之後</p><p>我就一直在尋找一個使用 Vim 來完成一些日常 Swift 使用的流程</p><p>雖然說在使用 UIKit 的自動補完上目前還是悲劇</p><p>但拿來取代個 Playground 應該是綽綽有餘</p><p>目前配置上是使用 nvim + <a href="https://github.com/neovim/nvim-lspconfig">nvim-lspconfig</a> 配合 sourcekit-lsp</p><p>加上 <a href="https://github.com/glepnir/lspsaga.nvim">lspsaga.nvim</a> 的漂浮視窗來做輸出驗證</p><span id="more"></span><p>使用上可以簡單的打開一個 .swift 檔案</p><p>直接呼叫 Terminal 執行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Swift &#123;filename&#125;</span><br></pre></td></tr></table></figure><img src=https://dl.dropboxusercontent.com/s/71n0wvay4vsoj6i/2022-03-15%2014.56.57.gif><p>或是開一個新的 Swift Package</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &#123;SomeFolder&#125;</span><br><span class="line">swift package init</span><br></pre></td></tr></table></figure><p>就可以順道利用裡面的 XCTest 模組來利用測試產出想要的程式碼</p><p>寫完一樣叫出 Terminal 然後執行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Swift test</span><br></pre></td></tr></table></figure><p>就可以看到結果拉</p><img src=https://dl.dropboxusercontent.com/s/g5ej6wc1ipe9yfr/2022-03-15%2015.04.15.gif>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 Apple 官方推出 &lt;a href=&quot;https://github.com/apple/sourcekit-lsp&quot;&gt;sourcekit-lsp&lt;/a&gt; 之後&lt;/p&gt;
&lt;p&gt;我就一直在尋找一個使用 Vim 來完成一些日常 Swift 使用的流程&lt;/p&gt;
&lt;p&gt;雖然說在使用 UIKit 的自動補完上目前還是悲劇&lt;/p&gt;
&lt;p&gt;但拿來取代個 Playground 應該是綽綽有餘&lt;/p&gt;
&lt;p&gt;目前配置上是使用 nvim + &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig&quot;&gt;nvim-lspconfig&lt;/a&gt; 配合 sourcekit-lsp&lt;/p&gt;
&lt;p&gt;加上 &lt;a href=&quot;https://github.com/glepnir/lspsaga.nvim&quot;&gt;lspsaga.nvim&lt;/a&gt; 的漂浮視窗來做輸出驗證&lt;/p&gt;</summary>
    
    
    
    
    <category term="Vim" scheme="https://donaldlwu.github.io/donaldwu.github.com/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>關於App Store上架圖，你可能想知道的那些事</title>
    <link href="https://donaldlwu.github.io/donaldwu.github.com/2022/03/09/%E9%97%9C%E6%96%BCApp%20Store%E4%B8%8A%E6%9E%B6%E5%9C%96%EF%BC%8C%E4%BD%A0%E5%8F%AF%E8%83%BD%E6%83%B3%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>https://donaldlwu.github.io/donaldwu.github.com/2022/03/09/%E9%97%9C%E6%96%BCApp%20Store%E4%B8%8A%E6%9E%B6%E5%9C%96%EF%BC%8C%E4%BD%A0%E5%8F%AF%E8%83%BD%E6%83%B3%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</id>
    <published>2022-03-09T21:53:16.000Z</published>
    <updated>2022-07-07T18:13:45.860Z</updated>
    
    <content type="html"><![CDATA[<p>在公司，要上架的時候通常都有 Design Team 提供設計好的上架圖。</p><p>但當你作為一名獨立開發者，這些事就都得自己處理拉。</p><p>抑或是你家設計初來乍到對 App Store 上架圖的規則不太了解，你得跟他解釋一下需求。</p><p>這邊就來統整一下過去我碰過的問題，以及一些好用的工具。</p><span id="more"></span><h3 id="1-我需要哪些尺寸的上架圖？"><a href="#1-我需要哪些尺寸的上架圖？" class="headerlink" title="1. 我需要哪些尺寸的上架圖？"></a>1. 我需要哪些尺寸的上架圖？</h3><hr><p>請看 Apple 提供的 <a href="https://help.apple.com/app-store-connect/#/devd274dd925">Screenshot specifications</a></p><p>細看 Screenshot specifications 裡提供的資訊，</p><p>我們可以依據 Requirement 以及 Screenshot source 這兩個欄位裡是不是必要，是不是有預設值來決定我們要提供哪些尺寸的截圖。</p><p>依照目前蘋果的要求，如果我想上架一款 iOS app，那我會需要提供 </p><table><thead><tr><th>6.5 inch</th></tr></thead><tbody><tr><td>1284 x 2778 pixels (portrait)<br>2778 x 1284 pixels (landscape)<br>1242 x 2688 pixels (portrait)<br>2688 x 1242 pixels (landscape)</td></tr></tbody></table><br><table><thead><tr><th>5.5 inch</th></tr></thead><tbody><tr><td>1242 x 2208 pixels (portrait)<br>2208 x 1242 pixels (landscape)</td></tr></tbody></table><br><p>如果 iPad 也可以用的話，加上</p><table><thead><tr><th>12.9 inch</th></tr></thead><tbody><tr><td>2048 x 2732 pixels (portrait)<br>2732 x 2048 pixels (landscape)</td></tr></tbody></table><br><h3 id="2-調整圖片大小的工具網站"><a href="#2-調整圖片大小的工具網站" class="headerlink" title="2. 調整圖片大小的工具網站"></a>2. 調整圖片大小的工具網站</h3><hr><p><a href="https://www.iloveimg.com/zh-tw">iloveimg</a></p><p>這網站把圖丟進去就可以自己調整需要的大小拉。</p><p>這方法簡單粗暴，可謂獨立開發者的好朋友。</p><br><h3 id="3-iPhone-外殼？"><a href="#3-iPhone-外殼？" class="headerlink" title="3. iPhone 外殼？"></a>3. iPhone 外殼？</h3><hr><p><a href="https://www.appstorescreenshot.com/">App Store Screenshot Generator</a></p><p>這網站可以讓你選擇一些裝置外殼，加上背景以及一些廣告詞。</p><p>而 <a href="https://mockuphone.com/">MockUPhone</a> 可以幫你的圖片單純的加上手機殼，並產生直立跟橫躺兩種圖片。</p><br><h3 id="4-我的-Side-Project-想自己想畫圖？"><a href="#4-我的-Side-Project-想自己想畫圖？" class="headerlink" title="4. 我的 Side Project 想自己想畫圖？"></a>4. 我的 Side Project 想自己想畫圖？</h3><hr><p>作為一款免費工具我想 <a href="https://www.figma.com/?fuid=">Figma</a> 是個不錯的選擇。</p><p>畫完還能利用他提供的 Export 功能把圖輸出。</p><br><h3 id="5-圖像不能包含alpha通道或透明度？"><a href="#5-圖像不能包含alpha通道或透明度？" class="headerlink" title="5. 圖像不能包含alpha通道或透明度？"></a>5. 圖像不能包含alpha通道或透明度？</h3><hr><p>簡單處理可以用 preview 打開圖片 file -&gt; export 把 alpha 的勾選清掉</p><br><h3 id="6-因為圖片被退件？"><a href="#6-因為圖片被退件？" class="headerlink" title="6. 因為圖片被退件？"></a>6. 因為圖片被退件？</h3><p>我遇過的是外框沒有依照尺寸給，我統一都用 6.5 inch 瀏海家族的 iPhoneX 外殼放在 5.5 inch 圖上然後就被退了🤪</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在公司，要上架的時候通常都有 Design Team 提供設計好的上架圖。&lt;/p&gt;
&lt;p&gt;但當你作為一名獨立開發者，這些事就都得自己處理拉。&lt;/p&gt;
&lt;p&gt;抑或是你家設計初來乍到對 App Store 上架圖的規則不太了解，你得跟他解釋一下需求。&lt;/p&gt;
&lt;p&gt;這邊就來統整一下過去我碰過的問題，以及一些好用的工具。&lt;/p&gt;</summary>
    
    
    
    
    <category term="上架圖" scheme="https://donaldlwu.github.io/donaldwu.github.com/tags/%E4%B8%8A%E6%9E%B6%E5%9C%96/"/>
    
  </entry>
  
  <entry>
    <title>nvim + shell script 漂浮視窗快速筆記</title>
    <link href="https://donaldlwu.github.io/donaldwu.github.com/2021/11/30/nvim%20+%20shell%20script%20%E6%BC%82%E6%B5%AE%E8%A6%96%E7%AA%97%E5%BF%AB%E9%80%9F%E7%AD%86%E8%A8%98/"/>
    <id>https://donaldlwu.github.io/donaldwu.github.com/2021/11/30/nvim%20+%20shell%20script%20%E6%BC%82%E6%B5%AE%E8%A6%96%E7%AA%97%E5%BF%AB%E9%80%9F%E7%AD%86%E8%A8%98/</id>
    <published>2021-11-30T11:10:16.000Z</published>
    <updated>2022-07-07T18:13:45.204Z</updated>
    
    <content type="html"><![CDATA[<p>雖然 mac 本身的 notes 就相當不錯</p><p>甚至在更新到 Monterey 之後也新增了<em>隨處可用</em> 的功能</p><p>第三方也有很多好用的軟體 Notion, hackmd 等等</p><p>但身為一名懶惰到不想把手移動到觸控板上的人來說</p><p>每次有些想法想快速紀錄一點想法</p><p>按下 <code>Option + Space</code> 叫出 Alfred 快速搜尋叫出 notes 或其他軟體之後的操作總覺得就是差了一點點</p><p>因此就決定自己來調整看看</p><span id="more"></span><p>所以首先要確定目標</p><p><em>Target: 鍵盤可以獨自完成從叫出筆記 -&gt; 寫筆記 -&gt; 關閉筆記這一連串動作，並繼續原本的作業</em></p><p>再來確認一下現況</p><ol><li>目前切換 app 都是使用 Alfred 搜索進行切換</li><li>notes 或 Notion 、hackmd 看起來後續操作都不太方便</li></ol><p>依照以上整理，切換看起來不會是大問題，問題是目前我用過的筆記軟體純用鍵盤的操作我都不太習慣</p><p>既然這樣，那就換一款我熟的吧</p><p>nvim + <a href="https://github.com/glepnir/lspsaga.nvim">lspsaga</a></p><p>看來是個不錯的選項</p><p>nvim 跟 tmux 的 terminal 可以提供我熟悉的文檔操作</p><p>而 lspsaga 可以提供漂亮的漂浮視窗並呼叫出 terminal</p><p>可以叫出 terminal 也就代表我們可以執行自訂的 script 來做事</p><hr><p>那這個 script 我希望可以做到幾件事</p><pre><code>1. 用日期為檔名建立一個新的 .md 檔案(如果檔案已存在就直接執行 2)2. 用 nvim 打開檔案，3. 並新增一行時間標題4. 移動至下一行並置中5. 開啟 insert mode</code></pre><p>OK，那接下來就是要實作的細節</p><ol><li><p>lspsaga 叫出漂浮視窗叫出 teminal 並執行 script</p></li><li><p>新增 notetaker.script 執行 <em>新增&#x2F;編輯</em> 筆記文檔</p></li></ol><p>根據 lspsaga 的文件，我們可以在設定檔內加上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nnoremap &lt;silent&gt; nt &lt;cmd&gt;lua require(&#x27;lspsaga.floaterm&#x27;).open_float_terminal(&#x27;notetaker.sh&#x27;)&lt;CR&gt;</span><br></pre></td></tr></table></figure><p>這樣只要在 nvim 的 normal mode 依序按下 nt 就會跳出 terminal 並執行 <code>notaker.sh</code> 這個命令了</p><p>然後就是關鍵的 Script 內容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#/bin/bash</span><br><span class="line"></span><br><span class="line">noteFilename=&quot;/Users/wuderen/Desktop/Note/note-$(date +%Y-%m-%d).md&quot;</span><br><span class="line"></span><br><span class="line">if [ ! -f $noteFilename ]; then</span><br><span class="line">    echo &quot;# Notes for $date&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">nvim -c &quot;norm Go&quot; \</span><br><span class="line">    -c &quot;norm Go## $(date +%H:%M)&quot; \</span><br><span class="line">    -c &quot;norm G2o&quot; \</span><br><span class="line">    -c &quot;norm zz&quot; \</span><br><span class="line">    -c &quot;startinsert&quot; $noteFilename</span><br></pre></td></tr></table></figure><hr><p>然後來執行吧</p><p>相信一定會很順利的…失敗</p><p>首先要先把 <code>notetaker.sh</code> 放到 <code>/usr/local/bin</code> </p><p>讓這個 script 可以順利在全域都可以執行</p><p>然後調整一下檔案的權限，不然也是沒辦法在跳出來的終端上執行的 </p><p><code>chmod u+x notetaker.sh</code></p><p>完成之後就可以來試試看拉</p><p>按下 nt 打開檔案 -&gt; 編輯文檔 -&gt; <code>Option + q</code> 離開</p><img src=https://dl.dropboxusercontent.com/s/5g22qc0gll4phxu/notetaker.gif><p>用起來還不錯 d(&#96;･∀･)b</p><br><p>參考資料</p><ol><li><a href="https://www.youtube.com/watch?v=zB_3FIGRWRU&t=274s">Calin Leafshade: Note Taking in vim with markdown and pandoc and bears, oh my!</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;雖然 mac 本身的 notes 就相當不錯&lt;/p&gt;
&lt;p&gt;甚至在更新到 Monterey 之後也新增了&lt;em&gt;隨處可用&lt;/em&gt; 的功能&lt;/p&gt;
&lt;p&gt;第三方也有很多好用的軟體 Notion, hackmd 等等&lt;/p&gt;
&lt;p&gt;但身為一名懶惰到不想把手移動到觸控板上的人來說&lt;/p&gt;
&lt;p&gt;每次有些想法想快速紀錄一點想法&lt;/p&gt;
&lt;p&gt;按下 &lt;code&gt;Option + Space&lt;/code&gt; 叫出 Alfred 快速搜尋叫出 notes 或其他軟體之後的操作總覺得就是差了一點點&lt;/p&gt;
&lt;p&gt;因此就決定自己來調整看看&lt;/p&gt;</summary>
    
    
    
    
    <category term="BASH" scheme="https://donaldlwu.github.io/donaldwu.github.com/tags/BASH/"/>
    
    <category term="nvim" scheme="https://donaldlwu.github.io/donaldwu.github.com/tags/nvim/"/>
    
    <category term="lspsaga" scheme="https://donaldlwu.github.io/donaldwu.github.com/tags/lspsaga/"/>
    
  </entry>
  
  <entry>
    <title>Tmux入坑心得</title>
    <link href="https://donaldlwu.github.io/donaldwu.github.com/2021/09/08/TMUX%E5%85%A5%E5%9D%91%E5%BF%83%E5%BE%97/"/>
    <id>https://donaldlwu.github.io/donaldwu.github.com/2021/09/08/TMUX%E5%85%A5%E5%9D%91%E5%BF%83%E5%BE%97/</id>
    <published>2021-09-08T18:31:09.000Z</published>
    <updated>2022-07-07T18:13:45.196Z</updated>
    
    <content type="html"><![CDATA[<p>自從拿到新的 M1 Mac，免不了是要設定一下環境啦</p><p>在過去的機器上我的終端是使用 iterm2 </p><p>換機器順便摸摸新東西</p><p>主要是覺得切換作業區跟分類的方式是我比較喜歡的</p><p>這篇主要就是紀錄一下我個人常用的功能</p><p>安裝和介紹 google 非常多，這裡就不多重複了</p><span id="more"></span><p>首先是 key 鍵，我把預設使用的 <code>Ctrl + c</code> 改成了 <code>Ctrl + a</code></p><p>然後調整了一下複製貼上的設定</p><p><code>Ctrl + a + [</code> 進入複製模式，然後跟 vim 一樣按下 v 開始選取需要複製的範圍(加上 <code>Ctrl + v</code> 開啟垂直選取)  </p><p>按下 y 確定複製，同時複製到系統剪貼簿</p><p>而且只要在 Tmux 底下都可以用，開著 vim 也可以輕鬆的共用，相當方便．</p><img src=https://dl.dropboxusercontent.com/s/lbges95s9ad53eb/tmuxcopy.gif><p>然後就是切換 Window 與 Session 了</p><p><code>Ctrl + a + w</code> 個人覺得這樣非常清楚知道整體狀況非常舒服</p><img src=https://dl.dropboxusercontent.com/s//oeldggnr94oqwin/tmuxSplit.png><p>螢幕切割其實我並沒有很常用，我通常喜歡直接開全新 Window 或 Session</p><p>但偶爾需要又忘記的時候就按下 <code>Ctrl + a + ?</code> 直接找</p><p>最後先附個 tmux.conf 裡的設定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#Send prefix</span><br><span class="line">set-option -g prefix C-a</span><br><span class="line">unbind-key C-a</span><br><span class="line">bind-key C-a send-prefix</span><br><span class="line"></span><br><span class="line"># Shift arrow to switch windows</span><br><span class="line">bind -n S-Left previous-window</span><br><span class="line">bind -n S-Right next-window</span><br><span class="line"></span><br><span class="line"># Mouse mode</span><br><span class="line">set -g mouse on</span><br><span class="line"></span><br><span class="line">setw -g mode-keys vi</span><br><span class="line">set-option -g default-command &quot;reattach-to-user-namespace -l zsh&quot;</span><br><span class="line">bind-key -T copy-mode-vi &#x27;v&#x27; send-keys -X begin-selection</span><br><span class="line">bind-key -T copy-mode-vi &#x27;y&#x27; send -X copy-pipe-and-cancel &quot;reattach-to-user-namespace pbcopy&quot;</span><br><span class="line">bind-key -T copy-mode-vi &#x27;r&#x27; send-keys -X rectangle-toggle</span><br><span class="line"></span><br><span class="line"># Set easier window split keys</span><br><span class="line">bind-key v split-window -h</span><br><span class="line">bind-key h split-window -v</span><br><span class="line"></span><br><span class="line"># Easy config reload</span><br><span class="line">bind-key r source-file ~/.tmux.conf \; display-message &quot;tmux.conf reloaded&quot;</span><br></pre></td></tr></table></figure><p>再來預計也將 vim 換成 nvim </p><p>原因是看到一些我覺得很好玩的東西</p><p>當初把自動產生預設文章格式的 Script 寫好生成這篇之後…</p><p>這篇就原樣躺在電腦裡兩個月以上有了，下一篇不知道… 呵呵</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;自從拿到新的 M1 Mac，免不了是要設定一下環境啦&lt;/p&gt;
&lt;p&gt;在過去的機器上我的終端是使用 iterm2 &lt;/p&gt;
&lt;p&gt;換機器順便摸摸新東西&lt;/p&gt;
&lt;p&gt;主要是覺得切換作業區跟分類的方式是我比較喜歡的&lt;/p&gt;
&lt;p&gt;這篇主要就是紀錄一下我個人常用的功能&lt;/p&gt;
&lt;p&gt;安裝和介紹 google 非常多，這裡就不多重複了&lt;/p&gt;</summary>
    
    
    
    
    <category term="tmux" scheme="https://donaldlwu.github.io/donaldwu.github.com/tags/tmux/"/>
    
  </entry>
  
  <entry>
    <title>20201102</title>
    <link href="https://donaldlwu.github.io/donaldwu.github.com/2020/11/02/20201102/"/>
    <id>https://donaldlwu.github.io/donaldwu.github.com/2020/11/02/20201102/</id>
    <published>2020-11-02T23:08:00.000Z</published>
    <updated>2022-07-07T18:13:43.820Z</updated>
    
    <content type="html"><![CDATA[<p>昨天跟朋友去看了鬼滅電影版</p><p>我就一句 幽浮桌🐂啤</p> <span id="more"></span><p>一直以特效（X）光汙染（O）為特點的幽浮桌</p><p>我真的覺得這次從節奏到情緒都超出我意料的好</p><p>整場沒太多讓我出戲的感覺</p><p>還在已經看過原作的情況下硬是被擠出幾滴淚 QAQ</p><img src="https://dl.dropboxusercontent.com/s/lsq4trpme0yq42e/%E7%9B%B8%E7%89%87%202020-11-2%20%E4%B8%8B%E5%8D%8811%2018%2031.png"> <p>有機會還想再去幾刷</p><p>大哥RRRRRRRR～～～～</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;昨天跟朋友去看了鬼滅電影版&lt;/p&gt;
&lt;p&gt;我就一句 幽浮桌🐂啤&lt;/p&gt;</summary>
    
    
    
    
    <category term="Talk rubbush" scheme="https://donaldlwu.github.io/donaldwu.github.com/tags/Talk-rubbush/"/>
    
  </entry>
  
  <entry>
    <title>2020/10/16</title>
    <link href="https://donaldlwu.github.io/donaldwu.github.com/2020/10/16/20201016/"/>
    <id>https://donaldlwu.github.io/donaldwu.github.com/2020/10/16/20201016/</id>
    <published>2020-10-16T17:43:25.000Z</published>
    <updated>2022-07-07T18:13:43.820Z</updated>
    
    <content type="html"><![CDATA[<p>新藍芽鍵盤再 iPad 上面使用 iVim竟然跳不出中文輸入法選字框</p><p> ◢▆▅▄▃ 崩╰(〒皿〒)╯潰▃▄▅▆◣</p><p>結果發現要在設定 -&gt; 一般 裡面把自動選字關掉</p><p>蒸蚌 </p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;新藍芽鍵盤再 iPad 上面使用 iVim竟然跳不出中文輸入法選字框&lt;/p&gt;
&lt;p&gt; ◢▆▅▄▃ 崩╰(〒皿〒)╯潰▃▄▅▆◣&lt;/p&gt;
&lt;p&gt;結果發現要在設定 -&amp;gt; 一般 裡面把自動選字關掉&lt;/p&gt;
&lt;p&gt;蒸蚌 &lt;/p&gt;</summary>
    
    
    
    
    <category term="IPAD" scheme="https://donaldlwu.github.io/donaldwu.github.com/tags/IPAD/"/>
    
  </entry>
  
  <entry>
    <title>20200304</title>
    <link href="https://donaldlwu.github.io/donaldwu.github.com/2020/03/04/20200304/"/>
    <id>https://donaldlwu.github.io/donaldwu.github.com/2020/03/04/20200304/</id>
    <published>2020-03-04T20:03:21.000Z</published>
    <updated>2022-07-07T18:13:43.820Z</updated>
    
    <content type="html"><![CDATA[<p>最近各路小編到底都嗑了什麼</p><p>各種 meme 井噴式湧出</p><p>要一直憋笑很累，但看很 High 就是了 LUL</p><img src="https://dl.dropboxusercontent.com/s/04wxqxz5p6vexub/%E3%82%B3%E3%83%AC%E3%83%B3%E3%83%8A.PNG">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近各路小編到底都嗑了什麼&lt;/p&gt;
&lt;p&gt;各種 meme 井噴式湧出&lt;/p&gt;
&lt;p&gt;要一直憋笑很累，但看很 High 就是了 LUL&lt;/p&gt;
&lt;img src=&quot;https://dl.dropboxusercontent.com/s/04wxqxz5p6vexub/%E3%</summary>
      
    
    
    
    
    <category term="Talk rubbush" scheme="https://donaldlwu.github.io/donaldwu.github.com/tags/Talk-rubbush/"/>
    
  </entry>
  
  <entry>
    <title>白箱是一部真正的賽車動畫(並沒有)</title>
    <link href="https://donaldlwu.github.io/donaldwu.github.com/2020/03/01/shirobako/"/>
    <id>https://donaldlwu.github.io/donaldwu.github.com/2020/03/01/shirobako/</id>
    <published>2020-03-01T07:32:22.000Z</published>
    <updated>2022-07-07T18:13:45.204Z</updated>
    
    <content type="html"><![CDATA[<p>連假難得的超早睡超早起</p><p>看到巴哈竟然有上架白箱</p><p>順手點進去就不小心整部重新刷了一遍</p><p>真的好好看啊，怎麼可以這麼好看</p><span id="more"></span><p>查了一下竟然已經是 6 年前的作品了</p><p>第一次看的時候都還是學生呢</p><p>當時只覺得很有趣，很多業界科普然後很好笑</p><p>出社會之後再回來看又有更多不同的感受</p><p>果然 P.A. 的工作女孩系列就是做給社畜看的無誤 XD</p><br/><p>雖然邊看總會邊吐槽</p><p>現實哪有這麼好的事</p><p>但看著劇中角色一步一步跨過那些你我日常都可能遇到的困難</p><p>還是常常不自覺被擠出兩滴淚</p><p>尤其是虐了 20 多集的角色終於看到曙光的時候</p><p>我就看到畫面一句話</p><p><strong>哭 都給我哭</strong></p><br/><p>然後作為一部業界科普動畫</p><p>巴哈字幕註解真的超詳細，各種暫停看註解 XD</p><p>登場人物非常多的職場群像劇，每個人物特徵也都很鮮明</p><p>然後飆車(速限遵守)場景輾壓一堆賽車番?</p><p>真的是一部各方面都很優秀的作品</p><p>神作蓋章XD</p><p>好期待剛上映的劇場版台灣也能上映 RRRR</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;連假難得的超早睡超早起&lt;/p&gt;
&lt;p&gt;看到巴哈竟然有上架白箱&lt;/p&gt;
&lt;p&gt;順手點進去就不小心整部重新刷了一遍&lt;/p&gt;
&lt;p&gt;真的好好看啊，怎麼可以這麼好看&lt;/p&gt;</summary>
    
    
    
    
    <category term="SHIROBAKO" scheme="https://donaldlwu.github.io/donaldwu.github.com/tags/SHIROBAKO/"/>
    
    <category term="Animation" scheme="https://donaldlwu.github.io/donaldwu.github.com/tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>20200225</title>
    <link href="https://donaldlwu.github.io/donaldwu.github.com/2020/02/25/20200225/"/>
    <id>https://donaldlwu.github.io/donaldwu.github.com/2020/02/25/20200225/</id>
    <published>2020-02-25T22:15:32.000Z</published>
    <updated>2022-07-07T18:13:43.820Z</updated>
    
    <content type="html"><![CDATA[<p>今天 Xcode 中了邪一樣，瘋狂 Crash</p><p>果然把使用 Xcode 進行開發列為職業傷害是沒有問題的對吧🤪</p><p>不過猜測應該是新抓的 DeviceSupport 檔案或 iOS 13.3.1 的鍋</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天 Xcode 中了邪一樣，瘋狂 Crash&lt;/p&gt;
&lt;p&gt;果然把使用 Xcode 進行開發列為職業傷害是沒有問題的對吧🤪&lt;/p&gt;
&lt;p&gt;不過猜測應該是新抓的 DeviceSupport 檔案或 iOS 13.3.1 的鍋&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="Talk rubbush" scheme="https://donaldlwu.github.io/donaldwu.github.com/tags/Talk-rubbush/"/>
    
  </entry>
  
  <entry>
    <title>利用 Bash script 簡化 iOS ipa OTA 發佈流程 (使用 Dropbox)</title>
    <link href="https://donaldlwu.github.io/donaldwu.github.com/2020/02/18/OTA%E6%B5%81%E7%A8%8B%E6%A6%82%E8%BF%B0/"/>
    <id>https://donaldlwu.github.io/donaldwu.github.com/2020/02/18/OTA%E6%B5%81%E7%A8%8B%E6%A6%82%E8%BF%B0/</id>
    <published>2020-02-18T09:10:11.000Z</published>
    <updated>2022-07-07T18:13:43.876Z</updated>
    
    <content type="html"><![CDATA[<p>去年 Fabric 確定合併回 Firebase 後就決定要另外找地方放出測試版給 QA</p><p>在內網架了一個簡單的網站</p><p>讓 QA 可以用手機打開網頁直接下載測試版 app</p><p>但因為 OTA 機制需要 Https </p><p>存放 manifest.plist 跟 ipa 的地方就選擇了 Dropbox </p><p>選擇的原因讓我後面再詳述</p><br/><p>然後因為手動上傳檔案跟 manifest 的修改過程太繁雜了，實在不是給人用的</p><p>簡單敘述就是</p><br/><ol><li><p>包好 ipa</p></li><li><p>上傳 ipa 到 Dropbox</p></li><li><p>分享 ipa 的鏈結</p></li><li><p>將分享鏈結填入 manifest.plist</p></li><li><p>將 manifest.plist 上傳至 Dropbox</p></li><li><p>分享 manifest.plist 的鏈結</p></li><li><p>將 manifest.plist 的鏈結的內容從 dropbox.com</p></li></ol><p>修改成下載用鏈結 dl.dropboxusercontent.com</p><ol start="8"><li>依照 itms-service 協議的格式將修改好的 manifest.plist 的下載鏈結放入網站</li></ol><br/><p>光寫完這一串就累了 @@</p><p>所以就決定寫點 Script 幫忙處理上面那一大串雜事吧</p><p>因為太多了這篇就只處理從 ipa 上傳到 dropbox 到可以下載的部分</p><span id="more"></span><p>首先是選擇 Dropbox 的理由</p><p>首先是 OTA 需要下載位置支援 https</p><p>自己架在內網內的 Server 不太想弄</p><img src="https://dl.dropboxusercontent.com/s/rucfbg0xbxo1w7b/%E7%9B%B8%E7%89%87%202020-2-13%20%E4%B8%8B%E5%8D%883%2001%2035.jpg"><br/><p>所以目標就轉移至簡單使用的雲端儲存服務</p><p>看了一下網路上也很多人分享使用 Dropbox 的文章</p><p>實作起來並不困難</p><p>最重要的是我在 Dropbox 的文件上找到了我需要的功能</p><p>就是能利用 POST 進行<strong>檔案的上傳</strong>以及前面提到的<strong>分享鏈結的產生</strong></p><br/><p>這樣目標就明確了</p><p>在 ipa 打包完成之後，執行 script 去執行上面那一串工作</p><p>首先打開 <a href="https://www.dropbox.com/developers/documentation/http/documentation">Dropbox 文件</a></p><p>Let’s go ~</p><h3 id="上傳-API"><a href="#上傳-API" class="headerlink" title="上傳 API"></a>上傳 API</h3><p>找到 <code>upload</code> 這隻 API 的說明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST https://content.dropboxapi.com/2/files/upload \</span><br><span class="line">    --header &quot;Authorization: Bearer &lt;get access token&gt;&quot; \</span><br><span class="line">    --header &quot;Dropbox-API-Arg: &#123;\&quot;path\&quot;: \&quot;/Homework/math/Matrices.txt\&quot;,\&quot;mode\&quot;: \&quot;add\&quot;,\&quot;autorename\&quot;: true,\&quot;mute\&quot;: false,\&quot;strict_conflict\&quot;: false&#125;&quot; \</span><br><span class="line">    --header &quot;Content-Type: application/octet-stream&quot; \</span><br><span class="line">    --data-binary @local_file.txt</span><br></pre></td></tr></table></figure><p>其中需要修改的位置有三個</p><p>首先是在 <code>Bearer</code> 後面要換成自己 Dropbox 帳號的 token</p><p>Dropbox 也很貼心的把 <get access token> 弄成一個按鈕</p><p>登入之後點下去就會顯示自己的 token 了</p><p>第二個是設定 Dropbox 上要儲存的路徑</p><p>也就是範例中 <code>/Homework/math/Matrices.txt</code> 的部分</p><p>最後是要上傳的本地檔案位置</p><p>也就是最後一行的 <code>local_file.txt</code> </p><br/><h3 id="取得分享鏈結位置"><a href="#取得分享鏈結位置" class="headerlink" title="取得分享鏈結位置"></a>取得分享鏈結位置</h3><p>一樣找到文件裡面 <code>create_shared_link_with_settings</code> 的說明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST https://api.dropboxapi.com/2/sharing/create_shared_link_with_settings \</span><br><span class="line">    --header &quot;Authorization: Bearer &lt;get access token&gt;&quot; \</span><br><span class="line">    --header &quot;Content-Type: application/json&quot; \</span><br><span class="line">    --data &quot;&#123;\&quot;path\&quot;: \&quot;/Homework/math/Matrices.txt\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>這隻 API 也是設定好 token</p><p>然後指定 Dropbox 上要分享的文件位置</p><p>對這次要達成的目標而言，重點在這隻 API 的 response</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;.tag&quot;: &quot;file&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;https://www.dropbox.com/s/2sn712vy1ovegw8/Prime_Numbers.txt?dl=0&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;Prime_Numbers.txt&quot;,</span><br><span class="line">    &quot;link_permissions&quot;: &#123;</span><br><span class="line">        &quot;can_revoke&quot;: false,</span><br><span class="line">        &quot;resolved_visibility&quot;: &#123;</span><br><span class="line">            &quot;.tag&quot;: &quot;public&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;revoke_failure_reason&quot;: &#123;</span><br><span class="line">            &quot;.tag&quot;: &quot;owner_only&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;client_modified&quot;: &quot;2015-05-12T15:50:38Z&quot;,</span><br><span class="line">    &quot;server_modified&quot;: &quot;2015-05-12T15:50:38Z&quot;,</span><br><span class="line">    &quot;rev&quot;: &quot;a1c10ce0dd78&quot;,</span><br><span class="line">    &quot;size&quot;: 7212,</span><br><span class="line">    &quot;id&quot;: &quot;id:a4ayc_80_OEAAAAAAAAAXw&quot;,</span><br><span class="line">    &quot;path_lower&quot;: &quot;/homework/math/prime_numbers.txt&quot;,</span><br><span class="line">    &quot;team_member_info&quot;: &#123;</span><br><span class="line">        &quot;team_info&quot;: &#123;</span><br><span class="line">            &quot;id&quot;: &quot;dbtid:AAFdgehTzw7WlXhZJsbGCLePe8RvQGYDr-I&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;Acme, Inc.&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;display_name&quot;: &quot;Roger Rabbit&quot;,</span><br><span class="line">        &quot;member_id&quot;: &quot;dbmid:abcd1234&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>會回傳一個 json 格式的資料</p><p>其中 <code>url</code> 這個欄位所帶回來的值就是我們這次的目標了</p><p>現在有了這兩隻 API ，就可以達成上傳檔案並拿到分享鏈結的目標了</p><br/><h3 id="manifest-plist"><a href="#manifest-plist" class="headerlink" title="manifest.plist"></a>manifest.plist</h3><p>接下來要處理的就是讓 app 能正確被手機下載所需要的 manifest.plist 了</p><p>最簡單的取得方式就是直接使用 Xcode 打包一次 development 的版本發佈</p><p>裡面就會有產生 manifest.plist 的選項了</p><p>這裡給出來的是使用 Development 打包發佈 ipa 的版本(因為是給自家 QA 測試)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span><br><span class="line">&lt;plist version=&quot;1.0&quot;&gt;</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">&lt;key&gt;items&lt;/key&gt;</span><br><span class="line">&lt;array&gt;</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">&lt;key&gt;assets&lt;/key&gt;</span><br><span class="line">&lt;array&gt;</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">&lt;key&gt;kind&lt;/key&gt;</span><br><span class="line">&lt;string&gt;software-package&lt;/string&gt;</span><br><span class="line">&lt;key&gt;url&lt;/key&gt;</span><br><span class="line">&lt;string&gt;https://dl.dropboxusercontent.com/s/dropbox_shared_link/demo.ipa&lt;/string&gt;</span><br><span class="line">&lt;/dict&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;key&gt;metadata&lt;/key&gt;</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">&lt;key&gt;bundle-identifier&lt;/key&gt;</span><br><span class="line">&lt;string&gt;&#123;your_bundle_identifier&#125;&lt;/string&gt;</span><br><span class="line">&lt;key&gt;bundle-version&lt;/key&gt;</span><br><span class="line">&lt;string&gt;now_build_number&lt;/string&gt;</span><br><span class="line">&lt;key&gt;kind&lt;/key&gt;</span><br><span class="line">&lt;string&gt;software&lt;/string&gt;</span><br><span class="line">&lt;key&gt;platform-identifier&lt;/key&gt;</span><br><span class="line">&lt;string&gt;com.apple.platform.iphoneos&lt;/string&gt;</span><br><span class="line">&lt;key&gt;title&lt;/key&gt;</span><br><span class="line">&lt;string&gt;demo&lt;/string&gt;</span><br><span class="line">&lt;/dict&gt;</span><br><span class="line">&lt;/dict&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;/dict&gt;</span><br><span class="line">&lt;/plist&gt;</span><br></pre></td></tr></table></figure><p>這裡面需要修改兩個地方</p><p>一個是用自己 app 的 <code>bundle identifier</code></p><p>直接取代掉 <code>&#123;your_bundle_identifier&#125;</code> </p><p>另外是將 <code>url</code>, <code>title</code> 兩個 key 底下的 demo 換成要發佈的 ipa名稱 與 app 名稱即可</p><br/><p>manifest.plist 中還有兩個地方是等等我們在寫 script </p><p>的時候希望能自動幫我們取代的東西</p><p>一個是 <code>dropbox_shared_link</code> 另一個就是 <code>bundle-version</code></p><p>這樣以後執行時帶入取得的下載位置連結跟版本號就輕鬆多了</p><p>這裡為何只需要修改 <code>dropbox_shared_link</code> 我們文章最後一起討論</p><br/><h3 id="目標細節-amp-檔案配置"><a href="#目標細節-amp-檔案配置" class="headerlink" title="目標細節 &amp; 檔案配置"></a>目標細節 &amp; 檔案配置</h3><p>作為一個減少人工作業的配置，當然需要多將一些繁雜的工作考慮進去</p><br/><h5 id="ipa-path"><a href="#ipa-path" class="headerlink" title="ipa path"></a>ipa path</h5><p>首先是 ipa 檔案打包好之後存放的位置跟上傳之後在 Dropbox 上的位置</p><p>希望可以簡單表達出這是哪一個版本，哪一個環境</p><p>因此在建置機器的本地端會將檔案輸出到 </p><p><code>/&#123;project_name&#125;/&#123;build_version&#125;(&#123;build_number&#125;)&#123;env&#125;</code></p><p>的目錄底下</p><p>並且上傳到 Dropbox 上相同的資料夾位置</p><p>因此假設我的專案名稱叫做 demo</p><p>這版本是 staging 環境的 1.0.1(345) 版本</p><p>打包好我就把它 export 到 <code>/demo/1.0.1(345)staging</code> 這個資料夾底下</p><p>這樣經過一段時間回來也能方便找到對的版本</p><br/><h5 id="manifest-plist-重複利用"><a href="#manifest-plist-重複利用" class="headerlink" title="manifest.plist 重複利用"></a>manifest.plist 重複利用</h5><p>作為大多內容不需要改動的 manifest.plist 檔案</p><p>上面範例檔案的參數就是希望能不需要每次都手動重新配制 manifest.plist</p><p>因此確認寫好的 manifest.plist 正確放置在建置機器下的路徑位置，並記錄下來</p><p>這樣等一下寫 script 的時候我們就知道該指定檔案的位置讓系統找到它了</p><p>如此一來，只要執行完再利用改動將檔案回復為使用前的狀態</p><p>就可以重複利用這個 manifest.plist 的範例檔案了</p><p>設定好一次就可以不理他囉</p><br/><h3 id="BASH-SCRIPT"><a href="#BASH-SCRIPT" class="headerlink" title="BASH SCRIPT"></a>BASH SCRIPT</h3><p>準備工作都完成了，開始來寫關鍵的執行腳本吧</p><p>重新回顧一下前面的步驟，並搭配我們的工具</p><p>可以重新整理出這個 script 實際執行需要的配置與動作如下</p><ol><li><p>接收三個外部參數 {version_number}, {build_number}, {env}</p></li><li><p>上傳 ipa 檔案到 Dropbox</p></li><li><p>取得 ipa Dropbox 分享鏈結</p></li><li><p>處理回傳資訊並拿出需要的鏈結位置資訊</p></li><li><p>將位置資訊以及 {version_number} 寫入 manifest.plist</p></li><li><p>上傳 manifest.plist</p></li><li><p>將本地 manifest.plist 回復為原本的設定</p></li><li><p>取得 manifest.plist Dropbox 分享鏈結</p></li><li><p>處理回傳資訊取得可以用來下載 app 的 url</p></li></ol><p>如下範例檔案</p><p>upload_dropbox_share_tamplate.sh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"># Step1 Get parameter</span><br><span class="line">echo $1</span><br><span class="line">echo &quot;version number&quot;</span><br><span class="line">echo $2</span><br><span class="line">echo &quot;build number&quot;</span><br><span class="line">echo $3</span><br><span class="line">echo &quot;env&quot;</span><br><span class="line"># prod/preprod/staging/dev</span><br><span class="line"></span><br><span class="line">echo &quot;&lt;your_file_location&gt;/demo$1($2)$3&quot;</span><br><span class="line"></span><br><span class="line"># Step2 upload ipa to dropbox</span><br><span class="line">curl -X POST https://content.dropboxapi.com/2/files/upload \</span><br><span class="line">--header &quot;Authorization: Bearer &lt;access_token&gt;&quot; \</span><br><span class="line">--header &quot;Dropbox-API-Arg: &#123;\&quot;path\&quot;: \&quot;/demo/$1($2)$3/demo.ipa\&quot;,\&quot;mode\&quot;: \&quot;add\&quot;,\&quot;autorename\&quot;: true,\&quot;mute\&quot;: false,\&quot;strict_conflict\&quot;: false&#125;&quot; \</span><br><span class="line">--header &quot;Content-Type: application/octet-stream&quot; \</span><br><span class="line">--data-binary &quot;@&lt;your_file_location&gt;/demo$1($2)$3/demo.ipa&quot;</span><br><span class="line"></span><br><span class="line">#---------</span><br><span class="line"></span><br><span class="line"># Step3 Create ipa file shared_link</span><br><span class="line">response=$(curl -X POST https://api.dropboxapi.com/2/sharing/create_shared_link_with_settings \</span><br><span class="line">--header &quot;Authorization: Bearer &lt;access_token&gt;&quot; \</span><br><span class="line">--header &quot;Content-Type: application/json&quot; \</span><br><span class="line">--data &quot;&#123;\&quot;path\&quot;: \&quot;/demo/$1($2)$3/demo.ipa\&quot;&#125;&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># Step4 Handle response</span><br><span class="line"># replce response string ex: &quot;https://www.dropbox.com/s/tcw9p8uxrlwzw09/xxx.ipa?dl=0.....&quot;</span><br><span class="line">echo $response</span><br><span class="line"># cut dl=0</span><br><span class="line">left=$&#123;response%?dl=0*&#125;</span><br><span class="line"># cut /xxx.ipa</span><br><span class="line">ipaName=$&#123;left%/*&#125;</span><br><span class="line"># cut https://www.dropbox.com/s/</span><br><span class="line">link=$&#123;ipaName#*s/&#125;</span><br><span class="line">echo $link</span><br><span class="line"></span><br><span class="line"># Step5 Set manifest file</span><br><span class="line"># dropbox_shared_link write into manifiest.plist</span><br><span class="line">sed -i &#x27;&#x27; &quot;s/dropbox_shared_link/$&#123;link&#125;/g&quot; &lt;your_file_location&gt;/manifest.plist</span><br><span class="line">sed -i &#x27;&#x27; &quot;s/now_build_number/$1/g&quot; &lt;your_file_location&gt;/manifest.plist</span><br><span class="line"></span><br><span class="line"># Step6 Upload manifest.plist</span><br><span class="line">curl -X POST https://content.dropboxapi.com/2/files/upload \</span><br><span class="line">--header &quot;Authorization: Bearer &lt;access_token&gt;&quot; \</span><br><span class="line">--header &quot;Dropbox-API-Arg: &#123;\&quot;path\&quot;: \&quot;/demo/$1($2)$3/manifest.plist\&quot;,\&quot;mode\&quot;: \&quot;add\&quot;,\&quot;autorename\&quot;: true,\&quot;mute\&quot;: false,\&quot;strict_conflict\&quot;: false&#125;&quot; \</span><br><span class="line">--header &quot;Content-Type: application/octet-stream&quot; \</span><br><span class="line">--data-binary &quot;@&lt;your_file_location&gt;/manifest.plist&quot;</span><br><span class="line"></span><br><span class="line"># Step7 Reset dropbox_shared_link in manifiest.plist</span><br><span class="line">sed -i &#x27;&#x27; &quot;s/$&#123;link&#125;/dropbox_shared_link/g&quot; &lt;your_file_location&gt;/manifest.plist</span><br><span class="line">sed -i &#x27;&#x27; &quot;s/$1/now_build_number/g&quot; &lt;your_file_location&gt;/manifest.plist</span><br><span class="line"></span><br><span class="line"># Step8 share_menifest.plist</span><br><span class="line">response_manifest=$(curl -X POST https://api.dropboxapi.com/2/sharing/create_shared_link_with_settings \</span><br><span class="line">--header &quot;Authorization: Bearer &lt;access_token&gt;&quot; \</span><br><span class="line">--header &quot;Content-Type: application/json&quot; \</span><br><span class="line">--data &quot;&#123;\&quot;path\&quot;: \&quot;/demo/$1($2)$3/manifest.plist\&quot;&#125;&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># Step9 Handle response</span><br><span class="line"># replce response string ex: &quot;https://www.dropbox.com/s/tcw9p8uxrlwzw09/manifest.plist?dl=0&quot;</span><br><span class="line">echo $response_manifest</span><br><span class="line"># cut dl=0</span><br><span class="line">left_m=$&#123;response_manifest%?dl=0*&#125;</span><br><span class="line"># cut /manifest.plist</span><br><span class="line">ipaName_m=$&#123;left_m%/*&#125;</span><br><span class="line"># cut https://www.dropbox.com/s/</span><br><span class="line">link_m=$&#123;ipaName_m#*s/&#125;</span><br><span class="line">echo $link_m</span><br></pre></td></tr></table></figure><p>使用上非常簡單，依照上方範例</p><p>修改好裡面檔案路徑位置之後</p><p>在 terminal 下移動到存放這個 upload_dropbox_share_tamplate.sh 的位置</p><p>執行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh upload_dropbox_share_tamplate.sh &#123;version_number&#125; &#123;build_number&#125; &#123;<span class="built_in">env</span>&#125;</span><br></pre></td></tr></table></figure><p>執行完會回覆一組字串</p><p>將這組字串組好 Dropbox 下載鏈結並放入網站中</p><p>點擊連結就可以下載 app 拉</p><br/><h3 id="關於-OTA-原理與-Dropbox-下載鏈結"><a href="#關於-OTA-原理與-Dropbox-下載鏈結" class="headerlink" title="關於 OTA 原理與 Dropbox 下載鏈結"></a>關於 OTA 原理與 Dropbox 下載鏈結</h3><p>實作完了我們就來看看前面沒有提到的部分吧</p><p>簡單來說就我理解到的 OTA(Over-the-Air) 安裝</p><p>是瀏覽器利用 itms-service 協議讓使用者的手機取得 manifest.plist 裡的資訊</p><p>app 名稱，版本，下載位置等等，並觸發下載流程</p><p><a href="https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/iPhoneOTAConfiguration/OTASecurity/OTASecurity.html">Over-the-Air Documentation</a></p><p>因此在 manifest.plist 中需要明確指定 ipa 的下載位置</p><p>而網站裡也需要有 manifest.plist 的下載位置讓瀏覽器去進行下載動作</p><p>為此我們必須將上傳至 Dropbox 並且取得可以用來<strong>直接</strong>下載的鏈結</p><p>依照 Dropbox 的說明，想要直接下載時</p><p>可以使用 <code>dl.dropboxusrecontent</code> 的路徑來取得檔案</p><p>並且可以發現下載鏈結的格式都可以統一成 </p><p><code>https://dl.dropboxusercontent.com/s/&#123;dropbox_shared_link&#125;/filename</code></p><p>而取得分享鏈結的 api 回傳的 url 欄位格式會是 </p><p><code>https://www.dropbox.com/s/&#123;dropbox_shared_link&#125;/filename</code></p><p>所以在處理下載鏈結時，只需要取出中間 {dropbox_shared_link} 部分的字串就可以了</p><p>BASH 檔案裡的 Step 3, Step 8 我就直接針對 response 的字串結果去處理</p><p>直接把前後的字通通摳掉，就可以得到我需要的 {dropbox_share_link} 字串了</p><p>再將這字串做需要的處理即可，像是 Step 4 塞入 manifest.plist</p><br/><p>範例檔案最後只有將 manifest.plist 的下載需要的 {dropbox_share_link}</p><p>這一串字印出來而已</p><p>其實還可以做後續的處理</p><p>像我是把它組成正確的下載鏈結，然後傳到 slack 跟更新到網站上</p><p>這樣搭配 CI + fastlane 就能完成 push code 完成就自動打包好送到 QA 手上拉</p><p>又朝著薪水小倫的目標更近一步了呢 0.0b</p><img src="https://dl.dropboxusercontent.com/s/d9jnudaenk9sav1/%E7%9B%B8%E7%89%87%202020-2-19%20%E4%B8%8B%E5%8D%886%2018%2054.jpg"><br/><p>有空再來寫寫打包的故事 emmm …</p><img src="https://dl.dropboxusercontent.com/s/02nokkwa0l06qji/%E7%9B%B8%E7%89%87%202020-2-19%20%E4%B8%8B%E5%8D%884%2028%2024.jpg">]]></content>
    
    
    <summary type="html">&lt;p&gt;去年 Fabric 確定合併回 Firebase 後就決定要另外找地方放出測試版給 QA&lt;/p&gt;
&lt;p&gt;在內網架了一個簡單的網站&lt;/p&gt;
&lt;p&gt;讓 QA 可以用手機打開網頁直接下載測試版 app&lt;/p&gt;
&lt;p&gt;但因為 OTA 機制需要 Https &lt;/p&gt;
&lt;p&gt;存放 manifest.plist 跟 ipa 的地方就選擇了 Dropbox &lt;/p&gt;
&lt;p&gt;選擇的原因讓我後面再詳述&lt;/p&gt;
&lt;br/&gt;

&lt;p&gt;然後因為手動上傳檔案跟 manifest 的修改過程太繁雜了，實在不是給人用的&lt;/p&gt;
&lt;p&gt;簡單敘述就是&lt;/p&gt;
&lt;br/&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;包好 ipa&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;上傳 ipa 到 Dropbox&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分享 ipa 的鏈結&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;將分享鏈結填入 manifest.plist&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;將 manifest.plist 上傳至 Dropbox&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分享 manifest.plist 的鏈結&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;將 manifest.plist 的鏈結的內容從 dropbox.com&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;修改成下載用鏈結 dl.dropboxusercontent.com&lt;/p&gt;
&lt;ol start=&quot;8&quot;&gt;
&lt;li&gt;依照 itms-service 協議的格式將修改好的 manifest.plist 的下載鏈結放入網站&lt;/li&gt;
&lt;/ol&gt;
&lt;br/&gt;

&lt;p&gt;光寫完這一串就累了 @@&lt;/p&gt;
&lt;p&gt;所以就決定寫點 Script 幫忙處理上面那一大串雜事吧&lt;/p&gt;
&lt;p&gt;因為太多了這篇就只處理從 ipa 上傳到 dropbox 到可以下載的部分&lt;/p&gt;</summary>
    
    
    
    
    <category term="OTA" scheme="https://donaldlwu.github.io/donaldwu.github.com/tags/OTA/"/>
    
    <category term="BASH" scheme="https://donaldlwu.github.io/donaldwu.github.com/tags/BASH/"/>
    
    <category term="Dropbox" scheme="https://donaldlwu.github.io/donaldwu.github.com/tags/Dropbox/"/>
    
  </entry>
  
  <entry>
    <title>20201213</title>
    <link href="https://donaldlwu.github.io/donaldwu.github.com/2020/02/13/20201213/"/>
    <id>https://donaldlwu.github.io/donaldwu.github.com/2020/02/13/20201213/</id>
    <published>2020-02-13T09:38:11.000Z</published>
    <updated>2022-07-07T18:13:43.820Z</updated>
    
    <content type="html"><![CDATA[<p>下班前踩中大坑真是刺激</p><p>果然我就是菜</p><img src="https://dl.dropboxusercontent.com/s/rucfbg0xbxo1w7b/%E7%9B%B8%E7%89%87%202020-2-13%20%E4%B8%8B%E5%8D%883%2001%2035.jpg"><span id="more"></span><p>在收到明天要測試的包版 target 之後</p><p>因為 CI 機器目前快撐不住了(高齡 mac mini)</p><p>打算先自己輸出 ipa 給 QA 進行測試</p><p>然後 XCode 就跳出了 IPA processing failed</p><p>乖乖按下 Show Logs 打開 IDEDistribution.standard.log 跟 google … 果然我並不孤單XD</p><p>看起來是 XCode 11 在打包時摳掉了對舊的 cputype i386 跟模擬器 x86_64 的支持</p><p>而我剛拉進專案的新 framework 看起來是中槍了</p><p>所以在 log 裡搜尋 cputype 果然就找到了錯誤訊息</p><img src="https://dl.dropboxusercontent.com/s/2k41b2io7ypctlh/%E7%9B%B8%E7%89%87%202020-2-12%20%E4%B8%8B%E5%8D%887%2033%2057.jpg"><p>看有大大教學可以先查證看看該 framework 有支持哪些架構</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lipo -info &#123;framework_name&#125;</span><br></pre></td></tr></table></figure><p>然後把不想支援的刪除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lipo -remove &#123;cputype&#125; &#123;framework_name&#125; -o &#123;framework_name&#125;</span><br></pre></td></tr></table></figure><p>再重新打包就可以了</p><p>但是 BUT しかし</p><p>我把 i386 跟 x86_64 的支援從 framework 裡面刪除之後</p><p>確實不能 build 在模擬器上了拉</p><p>但是打包輸出依然死去 …</p><p>好奇去翻了兩個用了很久的 framework 發現他們也還是支援 i386 跟 x86_64 啊</p><p>那到底？？？</p><p>只好乖乖先把有問題的新 framework 拉掉</p><p>還好本來就是實驗性質的小小功能，重寫並沒有花上太多時間</p><p>不過這次還是深刻體會自己到對 libries, framework 方面的無知</p><p><a href="https://twitter.com/ethanhuang13/status/1227827902714003456?s=21">剛好也在推特上看到 13 大大正好發了個推思考兩者的差異</a></p><p>是時候好好重新學習一下相關知識了</p><p>這業障重啊(PPSSPP 真好玩)</p><img src="https://dl.dropboxusercontent.com/s/gte9fmgbr6hffj1/%E7%9B%B8%E7%89%87%202019-12-18%20%E4%B8%8B%E5%8D%884%2023%2005.jpg">]]></content>
    
    
    <summary type="html">&lt;p&gt;下班前踩中大坑真是刺激&lt;/p&gt;
&lt;p&gt;果然我就是菜&lt;/p&gt;
&lt;img src=&quot;https://dl.dropboxusercontent.com/s/rucfbg0xbxo1w7b/%E7%9B%B8%E7%89%87%202020-2-13%20%E4%B8%8B%E5%8D%883%2001%2035.jpg&quot;&gt;</summary>
    
    
    
    
    <category term="Talk rubbush" scheme="https://donaldlwu.github.io/donaldwu.github.com/tags/Talk-rubbush/"/>
    
  </entry>
  
  <entry>
    <title>20200212</title>
    <link href="https://donaldlwu.github.io/donaldwu.github.com/2020/02/12/20200212/"/>
    <id>https://donaldlwu.github.io/donaldwu.github.com/2020/02/12/20200212/</id>
    <published>2020-02-12T10:08:00.000Z</published>
    <updated>2022-07-07T18:13:43.820Z</updated>
    
    <content type="html"><![CDATA[<p>昨天花了些時間把這個 blog 的部署串起來</p><p>現在早起打打淦話都覺得開心了起來呢？？？</p><span id="more"></span><p>早上公車開的超級無敵慢</p><p>看看 Bus+ ，還好下一班要接的公車還來得及</p><p>不過冷靜想想，早上那位司機的車速才是正常的啊！！！</p><p>我家是山區，本來就不該太快</p><p>只是老司機太多，大家都用飛的一樣XD</p><p>然候早上文章打一打竟然 crash 崩潰…  </p><p>踢公北啊 ヾ(;ﾟ;Д;ﾟ;)ﾉﾞ</p><p>暫時放棄 ish ，然後發現 iVim + Working Copy 意外順手</p><p>可以直接資料互通真棒 </p><p>iVim 編寫完可以直接 commit 到 Working Copy</p><p>也能直接 share Working Copy 的文件進 iVim 編輯</p><p>我先給 80 分，繼續用用看</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;昨天花了些時間把這個 blog 的部署串起來&lt;/p&gt;
&lt;p&gt;現在早起打打淦話都覺得開心了起來呢？？？&lt;/p&gt;</summary>
    
    
    
    
    <category term="Talk rubbush" scheme="https://donaldlwu.github.io/donaldwu.github.com/tags/Talk-rubbush/"/>
    
  </entry>
  
  <entry>
    <title>20200211</title>
    <link href="https://donaldlwu.github.io/donaldwu.github.com/2020/02/11/20200211/"/>
    <id>https://donaldlwu.github.io/donaldwu.github.com/2020/02/11/20200211/</id>
    <published>2020-02-11T14:43:25.000Z</published>
    <updated>2022-07-07T18:13:43.820Z</updated>
    
    <content type="html"><![CDATA[<p>記錄一下目前摸索出的 ipad 寫 blog 有用到的工具</p><p>目前 blog 是利用 hexo 架在 github 上，有兩個 repo， 一個是網站，另一個是 source code</p><p>部署是使用 Github Actions ， 在 source code push 時進行部署</p><p>撰寫是在 ipad 本地使用 ish 系統內使用 vim 撰寫並推送到 remote</p><p><a href="https://hdj.me/github-actions-hexo-cicd/">Github Actions 設置參考</a></p><p>ish 作為 Alpine Linux 系統需要自己安裝 git, vim, openssh</p><p>並配置好 vim 環境與外掛工具</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;記錄一下目前摸索出的 ipad 寫 blog 有用到的工具&lt;/p&gt;
&lt;p&gt;目前 blog 是利用 hexo 架在 github 上，有兩個 repo， 一個是網站，另一個是 source code&lt;/p&gt;
&lt;p&gt;部署是使用 Github Actions ， 在 source code push 時進行部署&lt;/p&gt;
&lt;p&gt;撰寫是在 ipad 本地使用 ish 系統內使用 vim 撰寫並推送到 remote&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hdj.me/github-actions-hexo-cicd/&quot;&gt;Github Actions 設置參考&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ish 作為 Alpine Linux 系統需要自己安裝 git, vim, openssh&lt;/p&gt;
&lt;p&gt;並配置好 vim 環境與外掛工具&lt;/p&gt;</summary>
    
    
    
    
    <category term="IPAD" scheme="https://donaldlwu.github.io/donaldwu.github.com/tags/IPAD/"/>
    
  </entry>
  
  <entry>
    <title>ipad-pro-配置之路之軟體不專業推薦</title>
    <link href="https://donaldlwu.github.io/donaldwu.github.com/2019/09/19/ipad-pro-%E9%85%8D%E7%BD%AE%E4%B9%8B%E8%B7%AF%E4%B9%8B%E8%BB%9F%E9%AB%94%E8%B8%A9%E9%9B%B7/"/>
    <id>https://donaldlwu.github.io/donaldwu.github.com/2019/09/19/ipad-pro-%E9%85%8D%E7%BD%AE%E4%B9%8B%E8%B7%AF%E4%B9%8B%E8%BB%9F%E9%AB%94%E8%B8%A9%E9%9B%B7/</id>
    <published>2019-09-19T06:29:13.000Z</published>
    <updated>2022-07-07T18:13:45.204Z</updated>
    
    <content type="html"><![CDATA[<p>在尋找目標軟體之前先列出我目前會需要使用的情境</p><ol><li>連線到 VPS 主機上確認後臺狀態</li><li>git pull code 到本地進行修改, git push</li><li>文件編輯</li></ol><span id="more"></span><p>首先是用來連線到遠端機器的軟體</p><p>目前有嘗試過的有這兩款 <a href="https://apps.apple.com/tw/app/termius-ssh-client/id549039908">termius</a> 以及<a href="https://apps.apple.com/tw/app/blink-shell-mosh-ssh-client/id1156707581">blink shell</a></p><p>就需求上來說都能滿足我的使用需求，ssh 連線，key 的管理等等</p><p>也都可以直接在 ipad 的檔案裡面進行操作</p><p>雖然從根本來說畢竟還是 iOS 的架構，根目錄還是鎖的死死的</p><p>如果哪天能直接在 ipad 上有 macOS 的系統就好了 <em>(´ཀ&#96;」 ∠)</em> </p><p>但目前看起來還有得等(阿不是說這台 pro 已經屌打一堆筆電了嗎QWQ，ipadOS…emmmmm…)</p><p>目前使用上是以 blink 為主，搭配 siri shortcut 可以很簡單的做到一鍵遠端連線的功能</p></br><p>接下來就是 git 以及編輯器拉</p><p>目前是使用 <a href="https://apps.apple.com/tw/app/working-copy-git-client/id896694807">Working copy</a> 搭配 <a href="https://apps.apple.com/tw/app/textastic-code-editor-8/id1049254261">Textastic</a></p><p>進行使用，Working copy 真的已經很完整，我平常會用到的 git 操作都有了</p><p>遠端 pull 下來之後 Textastic 也已經支援直接把 Working copy 的 repo import 進來編輯，相當方便</p><p>本文的撰寫就是用這樣的搭配下在 Textastic 下進行編輯，非常順暢的書寫體驗</p><p>不過身為一名不務正業又不專業的 iOS 工程師這裡還是得說</p><p>這樣的組合要寫 iOS 還是有點不舒服，畢竟本地端無法編譯，寫個網頁 Textastic 還有 preview in safari 的功能</p><p>iOS 如果拉回本地還得推回去做編譯，還不是推回去就看得到結果 <em>(´ཀ&#96;」 ∠)</em> </p><p>不得不說這是真的硬傷，目前還是乖乖用 mac 吧</p><p>不過基本的 iOS 功能實驗，使用 apple 自己推出的 <a href="https://apps.apple.com/tw/app/swift-playgrounds/id908519492">playground for ipad</a><br>就已經相當好用了</p><p>一些臨時想到的小功能在這裡實驗應該是綽綽有餘</p><p>編輯器這裡還有個小小的遺珠之憾 <a href="https://apps.apple.com/tw/app/buffer-editor-code-editor/id502633252">buffer</a></p><p>這個 app 兼具 git 與編輯器功能，編輯器甚至支援一部分基礎 vim 指令</p><p>剛開始用的非常順暢，但是可惜的是在我拉下我的其中一個專案進行使用時，出現了無法忽視的嚴重 lag</p><p>我目前不確定這是否是我專案的問題，但目前只好暫時割愛</p><p>不然就綜合使用體驗來說 buffer editer 真的非常棒</p></br><p>偶爾需要寫一些小文檔，或是臨時的紀錄時，我會使用的 markdown app <a href="https://apps.apple.com/tw/app/markdown/id1472328263">Markdown</a></p><p>真的就是個輕量的 markdown 文檔編輯器，簡單的畫面，清楚的左編寫右渲染結果呈現</p><p>用起來個人蠻喜歡的，也支援直接輸出 markdown 文檔，PDF，web頁面跟截圖功能</p><p>以及最近同事推薦的 hackmd.io(<a href="https://hackmd.io/">https://hackmd.io</a>) 也是相當好用</p><p><a href="https://apps.apple.com/tw/app/goodnotes-5/id1444383602">Good notes</a> 配上 apple pancel 在文件上面塗鴉些幹話也變得相當簡單</p><p>甚至拿來作簡單的流程圖也沒問題(唯一的問題是那隻貴鬆鬆的筆啊)</p></br><p>這台 ipad 確實很大程度改變了我目前的寫作習慣(原本沒有應該也可以算改變吧_(´ཀ&#96;」 ∠)_)</p><p>我可以不背著我的 mac pro 也能瞎掰寫日記了XD</p><p>但是以一個工程師來說最根本的問題還是你依舊需要一台主機負責作為最終需要編譯或部署的主角</p><p>對於希望能一台 ipad 解決所有工作的人來說還是一個不小的缺憾啊</p><p>蘋果拔拔快給我個能編譯的 ipadOS 啊啊啊啊啊啊啊啊啊啊啊～～～～</p><h3 id="19-x2F-10-x2F-23-更新-Hackmd-心得"><a href="#19-x2F-10-x2F-23-更新-Hackmd-心得" class="headerlink" title="19&#x2F;10&#x2F;23 更新 - Hackmd 心得"></a>19&#x2F;10&#x2F;23 更新 - Hackmd 心得</h3><p>在使用了一陣 hackmd 之後，更新這個部落格的工作就可以讓 hackmd 直接同步</p><p>在 github 上的專案，進行文章的修改，這應該是目前個人用起來最順手的一個方式</p><h3 id="19-x2F-10-x2F-23-更新趴兔-iSH"><a href="#19-x2F-10-x2F-23-更新趴兔-iSH" class="headerlink" title="19&#x2F;10&#x2F;23 更新趴兔 - iSH"></a>19&#x2F;10&#x2F;23 更新趴兔 - iSH</h3><p><a href="https://ish.app/">iSH</a> 這是在尋找各種使用資料時找到的 iOS app</p><p>目前尚在 beta 版本，原理應該使直接運行一個 apline linux 系統</p><p>系統本身極小，但是相對的就是需要什麼都得自己裝，少了什麼都得自己找</p><p>目前更新網站用的 hexo 需要使用的 npm 因為相容性問題尚無法使用</p><p>只能默默按下 github 上面 issue 的關注XD</p><p>不過本身執行一些 linux 的基本功能確實是順手很多</p><p>期待能在 iPad 上面執行多數工作的那一天能快點到來 (シ_ _)シ</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在尋找目標軟體之前先列出我目前會需要使用的情境&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;連線到 VPS 主機上確認後臺狀態&lt;/li&gt;
&lt;li&gt;git pull code 到本地進行修改, git push&lt;/li&gt;
&lt;li&gt;文件編輯&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="IPAD" scheme="https://donaldlwu.github.io/donaldwu.github.com/tags/IPAD/"/>
    
  </entry>
  
  <entry>
    <title>ipad pro 配置之路 - 序-硬體設備</title>
    <link href="https://donaldlwu.github.io/donaldwu.github.com/2019/09/11/ipad-pro-%E9%85%8D%E7%BD%AE%E4%B9%8B%E8%B7%AF/"/>
    <id>https://donaldlwu.github.io/donaldwu.github.com/2019/09/11/ipad-pro-%E9%85%8D%E7%BD%AE%E4%B9%8B%E8%B7%AF/</id>
    <published>2019-09-11T13:43:25.000Z</published>
    <updated>2022-07-07T18:13:45.204Z</updated>
    
    <content type="html"><![CDATA[<p>今年中一個手滑手邊就多了一台 11 吋 ipad pro</p><p>都課下去了勢必要讓這臺 ipad 能一定程度上成為我生產力工具的一部分</p><img src="/donaldwu.github.com/2019/09/11/ipad-pro-%E9%85%8D%E7%BD%AE%E4%B9%8B%E8%B7%AF/photo.jpeg" class=""><p>看看這過去一年死寂一片的部落格</p><p>這次購買純粹只是為了技術研究以及養成寫作習慣為目才買的拉</p><p>就跟小時候買電腦絕對不是為了打電動，是想好好讀書查資料的邏輯 87 趴像呢</p><span id="more"></span><p>然後在一番研究把玩之後，多多少少讓我摸索出一些用法來了</p><p>以下整理有用到的 app 與服務相關的一些心得</p><p>首先是配備，這次購入的是 11 吋 ipad pro 64G wifi 版</p><p>不過用了些時日還是真心覺得有行動網路方便些，雖然接自己手機網路也很快</p><p>總是需要多帶些東西，比較不方便</p><p>鍵盤我是直接與 ipad 一起購買了 smartkeyboard</p><p>實際打起來還算舒適，唯一缺點反而是在切換輸入法的時候軟體的反應速度真的慢</p><p>經常打字在中英切換時第一個字還是原本的語言，就得回頭修改，挺煩人的</p><p>不過整體使用下來久了也就漸漸習慣，還常常回去用 mac 的時候不自覺的想用手戳螢幕@@</p><p>韌體方面也 ipadOS 由於還是 Beta 版，多少會有些閃退，行為不如預期的狀況</p><p>但還不到嚴重影響使用的程度</p><p>最後是 apple pancil </p><p>老實說手感不錯，使用上配合好 app 真的不錯</p><p>畫起流程圖或是修改一些文件都很方便</p><p>而且可以避免手指一直去戳螢幕搞得螢幕很髒</p><p>但這個價格 emmm…..</p><p>還是買之前請好好評估自己對繪圖工作的需求量XD</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今年中一個手滑手邊就多了一台 11 吋 ipad pro&lt;/p&gt;
&lt;p&gt;都課下去了勢必要讓這臺 ipad 能一定程度上成為我生產力工具的一部分&lt;/p&gt;
&lt;img src=&quot;/donaldwu.github.com/2019/09/11/ipad-pro-%E9%85%8D%E7%BD%AE%E4%B9%8B%E8%B7%AF/photo.jpeg&quot; class=&quot;&quot;&gt;

&lt;p&gt;看看這過去一年死寂一片的部落格&lt;/p&gt;
&lt;p&gt;這次購買純粹只是為了技術研究以及養成寫作習慣為目才買的拉&lt;/p&gt;
&lt;p&gt;就跟小時候買電腦絕對不是為了打電動，是想好好讀書查資料的邏輯 87 趴像呢&lt;/p&gt;</summary>
    
    
    
    
    <category term="IPAD" scheme="https://donaldlwu.github.io/donaldwu.github.com/tags/IPAD/"/>
    
  </entry>
  
</feed>
